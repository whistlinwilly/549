package org.example.opengl;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

public class ObjectFactory {
	
	// Number of objects inflated by this factory
	// also used to set uid of new objects
	int numObjects;
	
	String state, dir;
	
	List<Float> vertices, textures, normals;
	List<Surface> newSurfaces;

	boolean readingVertices = false;
	boolean readingTextures = false;
	boolean readingNormals = false;
	boolean readingFaces = false;
	boolean DEBUG = true;

	private String lineIsThis;
	
	public ObjectFactory(String defaultDir) {
		
		numObjects = 0;
		state = Environment.getExternalStorageState();
		dir = defaultDir;
		vertices = new ArrayList<Float>();
		textures = new ArrayList<Float>();
		normals = new ArrayList<Float>();
		newSurfaces = new ArrayList<Surface>();
	}
	
	public Object loadObject(String fileName, Context context) throws FileNotFoundException{
		Object newObj = new Object(numObjects++);
		String line = null;
		int vertexIndex1 = 0, textureIndex = 0, normalIndex = 0, vertexIndex2 = 0, vertexIndex3 = 0, vertexIndex4 = 0;
		
		//SD Card is mounted
		if(Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)){
			//File is .obj file
			if(fileName.contains(".obj")){
				Scanner input = new Scanner(new File(Environment.getExternalStorageDirectory().getAbsolutePath() + dir,fileName));
				Log.w("Object Factory", "Opened File, Beginning to Parse");
				while(input.hasNextLine()){
					if(input.hasNext(Pattern.compile("v"))){
						if(!readingVertices){
							readingVertices = true;
							Log.w("Object Factory", "Found Vertex Section, Now Parsing");
						}
						//input.useDelimiter(" ");
						input.next();
						float x = input.nextFloat();
						float y = input.nextFloat();
						float z = input.nextFloat();
						
						vertices.add(x);
						vertices.add(y);
						vertices.add(z);
						
						Log.w("Object Factory", "Added new vertex (" + x + "," + y + "," + z + ")");
					}
					else if(input.hasNext(Pattern.compile("vt"))){
						if(!readingTextures && readingVertices){
							Log.w("Object Factory", "Found Texture Section, Now Parsing");
							readingTextures = true;
						}
						input.next();
						
						float x = input.nextFloat();
						float y = input.nextFloat();
						
						textures.add(x);
						textures.add(y);
						
						Log.w("Object Factory", "Added new texture vertex (" + x + "," + y + ")");
					}
					else if(input.hasNext(Pattern.compile("vn"))){
						if(!readingNormals && readingVertices){
							Log.w("Object Factory", "Found Normal Section, Now Parsing");
							readingNormals = true;
						}
						input.next();
						
						float x = input.nextFloat();
						float y = input.nextFloat();
						float z = input.nextFloat();
						
						normals.add(x);
						normals.add(y);
						normals.add(z);
						
						Log.w("Object Factory", "Added new normal vertex (" + x + "," + y + "," + z + ")");
					}
					else if(input.hasNext(Pattern.compile("f"))){
						Log.w("Object Factory", "Found Face Section, Now Parsing");
						input.next();
						String face = input.next();
						String numbers[] = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex1 = Integer.parseInt(numbers[0]);
						face = input.next();
						numbers = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex2 = Integer.parseInt(numbers[0]);
						face = input.next();
						numbers = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex3 = Integer.parseInt(numbers[0]);
						if(input.hasNext(Pattern.compile("\\/"))){
							face = input.next();
							numbers = face.split("/");
							vertexIndex4 = Integer.parseInt(numbers[0]);
						}
						Surface newSurface;
						if(vertexIndex4 > 0){
							Log.w("Object Factory", "Found New Quad Face " + vertexIndex1 + "/" + vertexIndex2 + "/" + vertexIndex3 + "/" + vertexIndex4);
							newSurface = new Surface(--vertexIndex1, --vertexIndex2, --vertexIndex3, --vertexIndex4);
						}
						else{
							Log.w("Object Factory", "Found New Tri Face " + vertexIndex1 + "/" + vertexIndex2 + "/" + vertexIndex3);
							newSurface = new Surface(--vertexIndex1, --vertexIndex2, --vertexIndex3);
						}
					
					newSurface.index = ByteBuffer.allocateDirect(newSurface.indices.length);
					newSurface.index.put(newSurface.indices);
					newSurface.index.position(0);
					
					newSurfaces.add(newSurface);
					}
					else if(input.hasNext()){
						lineIsThis = input.next();
						Log.w("Object Factory", "GOT UNKNOWN LINE:" + lineIsThis);
					}
					else{
						Log.w("Object Factory", "has next line, but no next item?!");
						break;
					}
				}
				
				//MODEL LOADED INTO TEMP ARRAY
			    Log.w("Object Factory", "Finished Parsing...");
				
			    
				ByteBuffer bb = ByteBuffer.allocateDirect(vertices.size() * 4);
				bb.order(ByteOrder.nativeOrder());
				newObj.vertices = bb.asFloatBuffer();
				
				
			for(int i = 0; i < vertices.size(); i++)
				newObj.vertices.put(vertices.get(i));
			
			newObj.vertices.flip();
			
			newObj.surfaces = new Surface[newSurfaces.size()];
			
			int i = 0;
			for(Surface curSurface: newSurfaces)
				newObj.surfaces[i++] = curSurface;
			
			    return newObj;
			}
		}
		return null;
		
	}

}
