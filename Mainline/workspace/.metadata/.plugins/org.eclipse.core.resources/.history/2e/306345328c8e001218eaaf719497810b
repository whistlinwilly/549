package org.example.opengl;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

public class ObjectFactory {
	
	// Number of objects inflated by this factory
	// also used to set uid of new objects
	int numObjects;
	
	String state, dir;
	
	List<Float> vertices, textures;

	boolean readingVertices = false;
	boolean readingTextures = false;
	boolean readingFaces = false;

	private String lineIsThis;
	
	public ObjectFactory(String defaultDir) {
		
		numObjects = 0;
		state = Environment.getExternalStorageState();
		dir = defaultDir;
		vertices = new ArrayList<Float>();
		textures = new ArrayList<Float>();
	}
	
	public Object loadObject(String fileName, Context context) throws FileNotFoundException{
		String line = null;
		
		//SD Card is mounted
		if(Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)){
			//File is .obj file
			if(fileName.contains(".obj")){
				Scanner input = new Scanner(new File(Environment.getExternalStorageDirectory().getAbsolutePath() + dir,fileName));
				while(input.hasNextLine()){
					if(input.hasNext(Pattern.compile("v"))){
						if(!readingVertices){
							readingVertices = true;
							Log.w("MESSAGE", "STARTED VERTICES");
						}
						input.next();
						vertices.add(input.nextFloat());
						vertices.add(input.nextFloat());
						vertices.add(input.nextFloat());
					}
					else if(input.hasNext(Pattern.compile("vt"))){
						if(!readingTextures && readingVertices){
							Log.w("MESSAGE", "FINISHED VERTICES");
							readingTextures = true;
						}
						input.next();
						textures.add(input.nextFloat());
						textures.add(input.nextFloat());
						textures.add(input.nextFloat());
					}
					else{
						if(readingTextures && readingVertices)
							readingFaces = true;
						if(readingFaces){
							Log.w("MESSAGE", "DONE loading!");
							break;
						}
						if(readingVertices && !readingTextures){
							Log.w("MESSAGE", "Seems model has no texture coordinates? Moving on...");
							break;
						}
						lineIsThis = input.next();
					}
				}
				
				//MODEL LOADED INTO TEMP ARRAY
			    Log.w("MESSAGE", "Converting from arraylist to float[]");
			    
//			    float[] floatArray = new float[vertices.size()];
//
//			    for (int i = 0; i < vertices.size(); i++) {
//			        Float f = vertices.get(i);
//			        floatArray[i] = (f != null ? f : Float.NaN); // Or whatever default you want.
//			    }
			    

				Object myObj = new Object(numObjects++);
				
				ByteBuffer bb = ByteBuffer.allocateDirect(vertices.size() * 4);
				bb.order(ByteOrder.nativeOrder());
				myObj.vertices = bb.asFloatBuffer();
				
				for(int i = 0; i < vertices.size(); i++)
					myObj.vertices.put(vertices.get(i));
				
			    Log.w("MESSAGE", "DONE!!!");
			    return myObj;
			}
		}
		return null;
		
	}

}
