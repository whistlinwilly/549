package org.example.opengl;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

public class ObjectFactory {
	
	// Number of objects inflated by this factory
	// also used to set uid of new objects
	int numObjects;
	//int totalVertices = 0;
	
	String state, dir;
	
	List<Float> vertices, textures, normals;
	List<Surface> newSurfaces;
	List<Object> allObjects;

	boolean readingVertices = false;
	boolean readingTextures = false;
	boolean readingNormals = false;
	boolean readingFaces = false;
	boolean DEBUG = true;
	
	Object newObj;

	private String lineIsThis;
	
	public ObjectFactory(String defaultDir) {
		
		numObjects = 0;
		state = Environment.getExternalStorageState();
		dir = defaultDir;
		vertices = new ArrayList<Float>();
		textures = new ArrayList<Float>();
		normals = new ArrayList<Float>();
		newSurfaces = new ArrayList<Surface>();
		allObjects = new ArrayList<Object>();
	}
	
	public Object[] loadObject(String fileName, Context context) throws FileNotFoundException{
		
		String line = null;
		int vertexIndex1 = 0, textureIndex = 0, normalIndex = 0, vertexIndex2 = 0, vertexIndex3 = 0, vertexIndex4 = 0;
		
		//SD Card is mounted
		if(Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)){
			//File is .obj file
			if(fileName.contains(".obj")){
				Scanner input = new Scanner(new File(Environment.getExternalStorageDirectory().getAbsolutePath() + dir,fileName));
				Log.w("Object Factory", "Opened File, Beginning to Parse");
				while(input.hasNextLine()){
					if(input.hasNext(Pattern.compile("v"))){
						if(!readingVertices){
							readingVertices = true;
							Log.w("Object Factory", "Found Vertex Section, Now Parsing");
						}
						//input.useDelimiter(" ");
						input.next();
						float x = Float.parseFloat(input.next());
						float y = Float.parseFloat(input.next());
						float z = Float.parseFloat(input.next());
						
						vertices.add(x);
						vertices.add(y);
						vertices.add(z);
						
						Log.w("Object Factory", "Added new vertex (" + x + "," + y + "," + z + ")");
					}
					else if(input.hasNext(Pattern.compile("vt"))){
						if(!readingTextures && readingVertices){
							Log.w("Object Factory", "Found Texture Section, Now Parsing");
							readingTextures = true;
						}
						input.next();
						
						float x = Float.parseFloat(input.next());
						float y = Float.parseFloat(input.next());
						
						textures.add(x);
						textures.add(y);
						
						Log.w("Object Factory", "Added new texture vertex (" + x + "," + y + ")");
					}
					else if(input.hasNext(Pattern.compile("vn"))){
						if(!readingNormals && readingVertices){
							Log.w("Object Factory", "Found Normal Section, Now Parsing");
							readingNormals = true;
						}
						input.next();
						
						float x = Float.parseFloat(input.next());
						float y = Float.parseFloat(input.next());
						float z = Float.parseFloat(input.next());
						
						normals.add(x);
						normals.add(y);
						normals.add(z);
						
						Log.w("Object Factory", "Added new normal vertex (" + x + "," + y + "," + z + ")");
					}
					else if(input.hasNext(Pattern.compile("f"))){
						if(!readingFaces){
							Log.w("Object Factory", "Found Face Section, Now Parsing");
							readingFaces = true;
						}
						input.next();
						String face = input.next();
						String numbers[] = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex1 = Integer.parseInt(numbers[0]);
						face = input.next();
						numbers = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex2 = Integer.parseInt(numbers[0]);
						face = input.next();
						numbers = face.split("/");
						if(numbers[0].length() > 0)
							vertexIndex3 = Integer.parseInt(numbers[0]);
						if(input.hasNext(Pattern.compile(".*/.*"))){
							face = input.next();
							numbers = face.split("/");
							vertexIndex4 = Integer.parseInt(numbers[0]);
						}
						Surface newSurface;
						if(vertexIndex4 > 0){
						//	vertexIndex1 -= totalVertices;
						//	vertexIndex2 -= totalVertices;
						//	vertexIndex3 -= totalVertices;
						//	vertexIndex4 -= totalVertices;
							Log.w("Object Factory", "Found New Quad Face " + vertexIndex1 + "/" + vertexIndex2 + "/" + vertexIndex3 + "/" + vertexIndex4);
							newSurface = new Surface(--vertexIndex1, --vertexIndex2, --vertexIndex3, --vertexIndex4);
						}
						else{
							Log.w("Object Factory", "Found New Tri Face " + vertexIndex1 + "/" + vertexIndex2 + "/" + vertexIndex3);
							newSurface = new Surface(--vertexIndex1, --vertexIndex2, --vertexIndex3);
						}
					
					newSurface.index = ByteBuffer.allocateDirect(newSurface.indices.length);
					newSurface.index.put(newSurface.indices);
					newSurface.index.position(0);
					
					newSurfaces.add(newSurface);
					vertexIndex1 = 0;
					vertexIndex2 = 0;
					vertexIndex3 = 0;
					vertexIndex4 = 0;
					}
					else if(input.hasNext(Pattern.compile("g"))){
						if(readingFaces){
//							Log.w("Object Factory", "Reached next group object:" + numObjects);
//							
//						    //Push vertices into buffer for opengl
//							ByteBuffer bb = ByteBuffer.allocateDirect(vertices.size() * 4);
//							bb.order(ByteOrder.nativeOrder());
//							newObj.vertices = bb.asFloatBuffer();
//							
//							
//						for(int i = 0; i < vertices.size(); i++)
//							newObj.vertices.put(vertices.get(i));
//						
//						newObj.vertices.flip();
//						
//						newObj.surfaces = new Surface[newSurfaces.size()];
//						
//						int i = 0;
//						for(Surface curSurface: newSurfaces)
//							newObj.surfaces[i++] = curSurface;
//						
//							allObjects.add(newObj);
//							
//						//Clean up for next object
//							vertices.clear();
//							textures.clear();
//							normals.clear();
//							newSurfaces.clear();
//							readingVertices = false;
//							readingTextures = false;
//							readingNormals = false;
//							readingFaces = false;
//							newObj = new Object(numObjects++);
//							
//							input.next();
//							
////							if(numObjects > 3)
////								break;
//													Log.w("Object Factory", "Reached next group object:" + numObjects);
							readingVertices = false;
							readingTextures = false;
							readingNormals = false;
							readingFaces = false;
							input.next();
						}
						else{
							Log.w("Object Factory", "Found starting object!");
							newObj = new Object(numObjects++);
							input.next();
						}
//						

					}
					else if(input.hasNext()){
						lineIsThis = input.next();
						Log.w("Object Factory", "GOT UNKNOWN LINE:" + lineIsThis);
					}
					else{
						Log.w("Object Factory", "Finished Parsing...");
						ByteBuffer bb = ByteBuffer.allocateDirect(vertices.size() * 4);
						bb.order(ByteOrder.nativeOrder());
						newObj.vertices = bb.asFloatBuffer();
						
						
					for(int i = 0; i < vertices.size(); i++)
						newObj.vertices.put(vertices.get(i));
					
					newObj.vertices.flip();
					
					newObj.surfaces = new Surface[newSurfaces.size()];
					
					int i = 0;
					for(Surface curSurface: newSurfaces)
						newObj.surfaces[i++] = curSurface;
					
						allObjects.add(newObj);
						break;
					}
				}
				

				Log.w("Object Factory", "Found a total of " + allObjects.size() + " objects");
				
				Object[] toReturn = new Object[allObjects.size()];
				
				int j = 0;
				
				for(Object curObj: allObjects)
					toReturn[j++] = curObj;
				
				return toReturn;
						
			 
			}
		}
		return null;
		
	}

}
